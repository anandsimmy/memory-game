{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["COLORS","App","useState","gameLevel","setGameLevel","localStorage","getItem","highScore","setHighScore","boxDetails","setBoxDetails","gameInfo","useRef","currentLevelDetails","gameIntervalId","current","console","log","resetGame","clearInterval","boxClickHandler","boxIndex","shift","color","boxNumber","setTimeout","length","currentLevel","setItem","wrongBox","randomNumberGenerator","min","max","Math","floor","random","useEffect","boxColor","i","setInterval","push","checkColorInterval","className","Array","fill","map","item","index","onClick","style","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.355b397e.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\nconst COLORS = ['blue', 'darkmagenta', 'purple', 'orange', 'violet',\n  'brown', 'chocolate', 'darksalmon', 'springgreen', 'royalblue']\n\nconst App= () => {\n\n  const [gameLevel, setGameLevel] = useState(0);\n  const [highScore, setHighScore] =  useState(localStorage.getItem('memory-game:high-score') ?? 0)\n  const [boxDetails, setBoxDetails] = useState({});\n  const { current: gameInfo } = useRef({ currentLevelDetails: [], gameIntervalId: null });\n\n  console.log(gameInfo.currentLevelDetails, gameInfo.gameIntervalId)\n\n  const resetGame = () => {\n    setBoxDetails({})\n    setGameLevel(0)\n    gameInfo.gameIntervalId= clearInterval(gameInfo.gameIntervalId);\n    gameInfo.currentLevelDetails = [];\n  }\n\n  const gameStartResetHandler = () => {\n    if (gameLevel === 0) {\n      setGameLevel(1);\n    } else {\n      resetGame();\n    }\n  }\n\n  const boxClickHandler = (boxIndex) => {\n    if (!gameLevel || gameInfo.gameIntervalId) return\n    if (boxIndex === gameInfo.currentLevelDetails[0]) {\n      gameInfo.currentLevelDetails.shift()\n      setBoxDetails({\n        color: 'green',\n        boxNumber: boxIndex,\n      })\n      setTimeout(() => {\n        setBoxDetails({});\n      }, 200)\n      if (gameInfo.currentLevelDetails.length === 0) {\n        setGameLevel((currentLevel) => {\n          if (highScore < currentLevel) {\n            localStorage.setItem('memory-game:high-score', currentLevel)\n            setHighScore(currentLevel);\n          }\n          return currentLevel + 1\n        });\n      }\n    } else {\n      setBoxDetails({\n        color: 'red',\n        boxNumber: boxIndex,\n        wrongBox: true\n      })\n      setTimeout(() => {\n        resetGame();\n      }, 500)\n    }\n  }\n  \n  const randomNumberGenerator = (min = 0, max = 5) => {\n    return Math.floor(Math.random() * (max - min) + min);\n  }\n\n  useEffect(() => {\n    if (gameLevel) {\n      const boxColor = COLORS[randomNumberGenerator(0,10)];\n      let i = 1;\n      gameInfo.gameIntervalId  = setInterval(() => {\n        const boxNumber= randomNumberGenerator()\n        setBoxDetails({\n          color: boxColor,\n          boxNumber,\n        })\n        gameInfo.currentLevelDetails.push(boxNumber);\n        i++;\n        checkColorInterval();\n        setTimeout(() => {\n          setBoxDetails({});\n        }, 500)\n      }, 1000)\n      const checkColorInterval = () => {\n        if (i > gameLevel) {\n          gameInfo.gameIntervalId= clearInterval(gameInfo.gameIntervalId);\n        }\n      }\n    }\n  }, [gameLevel])\n\n  const { color, boxNumber, wrongBox } = boxDetails;\n\n  return (\n    <div className=\"App\">\n      <div className=\"game-wrapper\">\n        <div className='score-wrapper'>\n          <div>Score: {Math.max(0, gameLevel - 1)}</div>\n          <div>Highscore: {highScore}</div>\n        </div>\n        <div className={`box-wrapper ${wrongBox ? 'shake' : ''}`}>\n          {\n            Array(5).fill(1).map((item, index) => {\n              if (index === boxNumber) {\n                return <div onClick={() => boxClickHandler(index)} key={index} style={{ backgroundColor: color }} className=\"box\"></div>\n              }\n              return <div onClick={() => boxClickHandler(index)} key={index} className=\"box\"></div>\n            })\n          }\n        </div>\n        <button className='reset-button' onClick={gameStartResetHandler}>\n          {`${gameLevel === 0 ? 'Start' : 'Reset'}`}\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}